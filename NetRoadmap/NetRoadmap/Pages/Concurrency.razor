@page "/concurrency"

<PageTitle>Concurrency</PageTitle>
<h2>Многопоточность и Асинхронное программирование</h2>
<table class="table table-striped table-bordered table-responsive w-auto m-auto">
    <thead>
    <tr>
        <th scope="col">Уровень</th>
        <th scope="col">Темы</th>
        <th scope="col">Материалы</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>
            <i class="bi bi-star-half"></i>
        </td>
        <td>Понимание терминов Процесс, Поток, Пулл потоков, Мертвая блокировка</td>
        <td>
            <a href="https://tproger.ru/problems/what-is-the-difference-between-threads-and-processes/">В чем разница между потоком и процессом?</a> <i class="bi bi-circle-fill"></i>
            <a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B7%D0%B0%D0%B8%D0%BC%D0%BD%D0%B0%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0">Взаимная блокировка</a> <i class="bi bi-circle-fill"></i>
            <a href="https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454">Книга СLR via C# by Jeffrey Richter, Глава 26</a> <i class="bi bi-circle-fill"></i>
            <a href="https://habr.com/ru/company/nix/blog/260745/">Основы многопоточности в .NET Framework</a>
        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-half"></i>
        </td>
        <td>Понимание концепций Многопоточного программирования, Асинхронного программирования и Параллелизма</td>
        <td>
            <a href="https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454">Книга СLR via C# by Jeffrey Richter, Глава 26</a> <i class="bi bi-circle-fill"></i>
            <a href="https://ru.stackoverflow.com/questions/445768/%d0%9c%d0%bd%d0%be%d0%b3%d0%be%d0%bf%d0%be%d1%82%d0%be%d1%87%d0%bd%d0%be%d0%b5-vs-%d0%b0%d1%81%d0%b8%d0%bd%d1%85%d1%80%d0%be%d0%bd%d0%bd%d0%be%d0%b5-%d0%bf%d1%80%d0%be%d0%b3%d1%80%d0%b0%d0%bc%d0%bc%d0%b8%d1%80%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5">Многопоточное vs асинхронное программирование</a>
            <i class="bi bi-circle-fill"></i> <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 14</a>
        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i>
        </td>
        <td>Класс Thread: Start, Join, Abort, Sleep | Фоновые и активные потоки </td>
        <td>
            <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 14</a> <i class="bi bi-circle-fill"></i>

        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i>
        </td>
        <td>Ключевые слова async и await, Syncronization Context</td>
        <td>
            <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 14</a> <i class="bi bi-circle-fill"></i>
            <a href="https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/concepts/async/">Асинхронное программирование с использованием ключевых слов async и await</a> <i class="bi bi-circle-fill"></i>
            <a href="https://www.youtube.com/watch?v=2moh18sh5p4">C# Async / Await - Make your app more responsive and faster with asynchronous programming</a>
        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i>
        </td>
        <td>Класс Task, Использование методов Run, Delay, WhenAny, WhenAll, ContinueWith, Обработка исключений, AggregateException</td>
        <td>
            <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 17</a> <i class="bi bi-circle-fill"></i>
            <a href="https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569">Книга Concurrency in C# Cookbook 1st Edition by Stephen Cleary</a>

        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i>
        </td>
        <td>Необходимость использования синхронизации потоков | Простая синхронизация потоков: ключевое слово lock, Monitor.Enter, Monitor.Exit, Interlocked</td>
        <td>
            <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 17</a> <i class="bi bi-circle-fill"></i>
            <a href="https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454">Книга СLR via C# by Jeffrey Richter, Глава 29</a> <i class="bi bi-circle-fill"></i>
            <a href="https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/keywords/lock-statement">Инструкция lock</a>
        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i><i class="bi bi-star-fill"></i>
        </td>
        <td>PLINQ: Parallel.For, Parallel.ForEach, AsParallel, AsOrdered, WithCancellation</td>
        <td>
            <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 24</a> <i class="bi bi-circle-fill"></i>
            <a href="https://docs.microsoft.com/ru-ru/dotnet/standard/parallel-programming/introduction-to-plinq">Введение в PLINQ</a>

        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i><i class="bi bi-star-fill"></i>
        </td>
        <td>
            Сихнронизация потоков: Mutex, Semaphor, AutoResetEvent, ManualResetEvent, Reader/Writer Locks, volatile
        </td>
        <td>
            <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 22</a> <i class="bi bi-circle-fill"></i>
            <a href="https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454">Книга СLR via C# by Jeffrey Richter, Главы 29,30</a>

        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i><i class="bi bi-star-fill"></i>
        </td>
        <td>
            Использование потокобезопасных коллекций: ConcurrentBag&lt;T&gt;, IProducerConsumerCollection&lt;T&gt;,
            ConcurrentDictionary&lt;T&gt;
        </td>
        <td>
            <a href="https://www.oreilly.com/library/view/c-10-in/9781098121945/">Книга C# 10.0 in a Nutshell, Глава 23</a> <i class="bi bi-circle-fill"></i>
            <a href="https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569">Книга Concurrency in C# Cookbook 1st Edition by Stephen Cleary</a>

        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i><i class="bi bi-star-fill"></i>
        </td>
        <td>Тестирование асинхронных методов</td>
        <td>
            <a href="https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569">Книга Concurrency in C# Cookbook 1st Edition by Stephen Cleary</a>


        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i><i class="bi bi-star-fill"></i>
        </td>
        <td>Task Scheduling</td>
        <td>
            <a href="https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569">Книга Concurrency in C# Cookbook 1st Edition, Глава 12</a>

        </td>
    </tr>
    <tr>
        <td>
            <i class="bi bi-star-fill"></i><i class="bi bi-star-fill"></i><i class="bi bi-star-fill"></i>
        </td>
        <td>Неизменяемые коллекции: ImmutableList&lt;T&gt;, ImmutableDictionary&lt;T&gt;, ImmutableHashSet&lt;T&gt;</td>
        <td>
            <a href="https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569">Книга Concurrency in C# Cookbook 1st Edition, Глава 8</a>

        </td>
    </tr>
    </tbody>
</table>


<h3>Контрольные вопросы:</h3>
<ul>
    <li>Что такое Виртуальное адресное пространство?</li>
    <li>Почему большое количество параллельных потоков могут ухудшить производительность приложения?</li>
    <li>В чем разница между Потоком и Процессом?</li>
    <li>Когда возникает Мертвая блокировка?</li>
    <li>В чем разница между Thread.Sleep и Task.Delay?</li>
    <li>В чем разница между Lock и Monitor?</li>
    <li>В чем разница между Thread и Task?</li>
    <li>Почему неизменяемые типы являются потокобезопасными?</li>
    <li>В чем разница между Многопоточным и Асинхронным программированием?</li>
    <li>Когда нужно думать о синхронизации потоков?</li>
    <li>В чем разница между механизмами синхронизации Mutex и Semaphore?</li>
    <li>Почему примитивные операции инкремента или присваивания нужно синхронизировать классом Interlocked?</li>
    <li>Что такое ReaderWriterLockSlim?</li>
    <li>Как создать потокобезопасный Синглтон?</li>
    <li>Является ли класс Lazy&lt;T&gt; потокобезопасным?</li>
</ul>